#
# API Documentation
# Howdy! Looks like you've found our open API documentation! Take a gander, and while you're at it feel free to take some endpoints for a spin.
# Version: 1.0
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER Id
DEPRECATED - Use id instead.
.PARAMETER Id
No description available.
.PARAMETER Name
No description available.
.PARAMETER Description
No description available.
.PARAMETER IntegrationType
No description available.
.PARAMETER ImageUri
No description available.
.PARAMETER Skus
No description available.
.PARAMETER IsDistributor
No description available.
.PARAMETER IntegrationPortalUrl
No description available.
.PARAMETER VendorSupportPageUrl
No description available.
.PARAMETER ExternalIntegrationStatus
No description available.
.PARAMETER MappingResponsibilities
DEPRECATED - All mappings with future versions will be handled in the Gradient UI.
.PARAMETER Modules
No description available.
.PARAMETER OrganizationId
No description available.
.PARAMETER UpdatedAt
No description available.
.PARAMETER CreatedAt
No description available.
.OUTPUTS

VendorData<PSCustomObject>
#>

function Initialize-PSVendorData {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Id},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${_Id},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Name},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Description},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${IntegrationType},
        [Parameter(Position = 5, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${ImageUri},
        [Parameter(Position = 6, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject[]]
        ${Skus},
        [Parameter(Position = 7, ValueFromPipelineByPropertyName = $true)]
        [Boolean]
        ${IsDistributor},
        [Parameter(Position = 8, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${IntegrationPortalUrl},
        [Parameter(Position = 9, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${VendorSupportPageUrl},
        [Parameter(Position = 10, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${ExternalIntegrationStatus},
        [Parameter(Position = 11, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject[]]
        ${MappingResponsibilities},
        [Parameter(Position = 12, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject[]]
        ${Modules},
        [Parameter(Position = 13, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${OrganizationId},
        [Parameter(Position = 14, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${UpdatedAt},
        [Parameter(Position = 15, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${CreatedAt}
    )

    Process {
        'Creating PSCustomObject: PSGradient => PSVendorData' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        if ($null -eq $Id) {
            throw "invalid value for 'Id', 'Id' cannot be null."
        }

        if ($null -eq $Id) {
            throw "invalid value for 'Id', 'Id' cannot be null."
        }

        if ($null -eq $Name) {
            throw "invalid value for 'Name', 'Name' cannot be null."
        }

        if ($null -eq $Description) {
            throw "invalid value for 'Description', 'Description' cannot be null."
        }

        if ($null -eq $IntegrationType) {
            throw "invalid value for 'IntegrationType', 'IntegrationType' cannot be null."
        }

        if ($null -eq $Skus) {
            throw "invalid value for 'Skus', 'Skus' cannot be null."
        }

        if ($null -eq $IsDistributor) {
            throw "invalid value for 'IsDistributor', 'IsDistributor' cannot be null."
        }

        if ($null -eq $ExternalIntegrationStatus) {
            throw "invalid value for 'ExternalIntegrationStatus', 'ExternalIntegrationStatus' cannot be null."
        }

        if ($null -eq $MappingResponsibilities) {
            throw "invalid value for 'MappingResponsibilities', 'MappingResponsibilities' cannot be null."
        }

        if ($null -eq $Modules) {
            throw "invalid value for 'Modules', 'Modules' cannot be null."
        }

        if ($null -eq $UpdatedAt) {
            throw "invalid value for 'UpdatedAt', 'UpdatedAt' cannot be null."
        }

        if ($null -eq $CreatedAt) {
            throw "invalid value for 'CreatedAt', 'CreatedAt' cannot be null."
        }


        $PSO = [PSCustomObject]@{
            "_id" = ${Id}
            "id" = ${Id}
            "name" = ${Name}
            "description" = ${Description}
            "integrationType" = ${IntegrationType}
            "imageUri" = ${ImageUri}
            "skus" = ${Skus}
            "isDistributor" = ${IsDistributor}
            "integrationPortalUrl" = ${IntegrationPortalUrl}
            "vendorSupportPageUrl" = ${VendorSupportPageUrl}
            "externalIntegrationStatus" = ${ExternalIntegrationStatus}
            "mappingResponsibilities" = ${MappingResponsibilities}
            "modules" = ${Modules}
            "organizationId" = ${OrganizationId}
            "updatedAt" = ${UpdatedAt}
            "createdAt" = ${CreatedAt}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to VendorData<PSCustomObject>

.DESCRIPTION

Convert from JSON to VendorData<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

VendorData<PSCustomObject>
#>
function ConvertFrom-PSJsonToVendorData {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: PSGradient => PSVendorData' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in PSVendorData
        $AllProperties = ("_id", "id", "name", "description", "integrationType", "imageUri", "skus", "isDistributor", "integrationPortalUrl", "vendorSupportPageUrl", "externalIntegrationStatus", "mappingResponsibilities", "modules", "organizationId", "updatedAt", "createdAt")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        If ([string]::IsNullOrEmpty($Json) -or $Json -eq "{}") { # empty json
            throw "Error! Empty JSON cannot be serialized due to the required property '_id' missing."
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "_id"))) {
            throw "Error! JSON cannot be serialized due to the required property '_id' missing."
        } else {
            $Id = $JsonParameters.PSobject.Properties["_id"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "id"))) {
            throw "Error! JSON cannot be serialized due to the required property 'id' missing."
        } else {
            $Id = $JsonParameters.PSobject.Properties["id"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "name"))) {
            throw "Error! JSON cannot be serialized due to the required property 'name' missing."
        } else {
            $Name = $JsonParameters.PSobject.Properties["name"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "description"))) {
            throw "Error! JSON cannot be serialized due to the required property 'description' missing."
        } else {
            $Description = $JsonParameters.PSobject.Properties["description"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "integrationType"))) {
            throw "Error! JSON cannot be serialized due to the required property 'integrationType' missing."
        } else {
            $IntegrationType = $JsonParameters.PSobject.Properties["integrationType"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "skus"))) {
            throw "Error! JSON cannot be serialized due to the required property 'skus' missing."
        } else {
            $Skus = $JsonParameters.PSobject.Properties["skus"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "isDistributor"))) {
            throw "Error! JSON cannot be serialized due to the required property 'isDistributor' missing."
        } else {
            $IsDistributor = $JsonParameters.PSobject.Properties["isDistributor"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "externalIntegrationStatus"))) {
            throw "Error! JSON cannot be serialized due to the required property 'externalIntegrationStatus' missing."
        } else {
            $ExternalIntegrationStatus = $JsonParameters.PSobject.Properties["externalIntegrationStatus"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "mappingResponsibilities"))) {
            throw "Error! JSON cannot be serialized due to the required property 'mappingResponsibilities' missing."
        } else {
            $MappingResponsibilities = $JsonParameters.PSobject.Properties["mappingResponsibilities"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "modules"))) {
            throw "Error! JSON cannot be serialized due to the required property 'modules' missing."
        } else {
            $Modules = $JsonParameters.PSobject.Properties["modules"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "updatedAt"))) {
            throw "Error! JSON cannot be serialized due to the required property 'updatedAt' missing."
        } else {
            $UpdatedAt = $JsonParameters.PSobject.Properties["updatedAt"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "createdAt"))) {
            throw "Error! JSON cannot be serialized due to the required property 'createdAt' missing."
        } else {
            $CreatedAt = $JsonParameters.PSobject.Properties["createdAt"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "imageUri"))) { #optional property not found
            $ImageUri = $null
        } else {
            $ImageUri = $JsonParameters.PSobject.Properties["imageUri"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "integrationPortalUrl"))) { #optional property not found
            $IntegrationPortalUrl = $null
        } else {
            $IntegrationPortalUrl = $JsonParameters.PSobject.Properties["integrationPortalUrl"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "vendorSupportPageUrl"))) { #optional property not found
            $VendorSupportPageUrl = $null
        } else {
            $VendorSupportPageUrl = $JsonParameters.PSobject.Properties["vendorSupportPageUrl"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "organizationId"))) { #optional property not found
            $OrganizationId = $null
        } else {
            $OrganizationId = $JsonParameters.PSobject.Properties["organizationId"].value
        }

        $PSO = [PSCustomObject]@{
            "_id" = ${Id}
            "id" = ${Id}
            "name" = ${Name}
            "description" = ${Description}
            "integrationType" = ${IntegrationType}
            "imageUri" = ${ImageUri}
            "skus" = ${Skus}
            "isDistributor" = ${IsDistributor}
            "integrationPortalUrl" = ${IntegrationPortalUrl}
            "vendorSupportPageUrl" = ${VendorSupportPageUrl}
            "externalIntegrationStatus" = ${ExternalIntegrationStatus}
            "mappingResponsibilities" = ${MappingResponsibilities}
            "modules" = ${Modules}
            "organizationId" = ${OrganizationId}
            "updatedAt" = ${UpdatedAt}
            "createdAt" = ${CreatedAt}
        }

        return $PSO
    }

}

