#
# API Documentation
# Howdy! Looks like you've found our open API documentation! Take a gander, and while you're at it feel free to take some endpoints for a spin.
# Version: 1.0
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER Title
Name of alert.
.PARAMETER Description
No description available.
.PARAMETER AlertId
A unique identifier for the Alert.
.PARAMETER Priority
Priority which maps to Ticket. { 1: low, 2: medium, 3: high, 4: very_high }
.PARAMETER Status
Status which maps to Ticket.
.PARAMETER DueDateTime
Due Date.
.PARAMETER ServiceId
Relevant Service associated to alert
.OUTPUTS

CreateAlertingDto<PSCustomObject>
#>

function Initialize-PSCreateAlertingDto {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Title},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Description},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${AlertId},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true)]
        [Decimal]
        ${Priority} = 1,
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true)]
        [Decimal]
        ${Status} = 1,
        [Parameter(Position = 5, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[System.DateTime]]
        ${DueDateTime},
        [Parameter(Position = 6, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${ServiceId}
    )

    Process {
        'Creating PSCustomObject: PSGradient => PSCreateAlertingDto' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        if ($null -eq $Title) {
            throw "invalid value for 'Title', 'Title' cannot be null."
        }

        if ($null -eq $Description) {
            throw "invalid value for 'Description', 'Description' cannot be null."
        }

        if ($null -eq $AlertId) {
            throw "invalid value for 'AlertId', 'AlertId' cannot be null."
        }

        if ($null -eq $Priority) {
            throw "invalid value for 'Priority', 'Priority' cannot be null."
        }

        if ($Priority -gt 4) {
          throw "invalid value for 'Priority', must be smaller than or equal to 4."
        }

        if ($Priority -lt 1) {
          throw "invalid value for 'Priority', must be greater than or equal to 1."
        }

        if ($null -eq $Status) {
            throw "invalid value for 'Status', 'Status' cannot be null."
        }

        if ($Status -gt 6) {
          throw "invalid value for 'Status', must be smaller than or equal to 6."
        }

        if ($Status -lt 1) {
          throw "invalid value for 'Status', must be greater than or equal to 1."
        }


        $PSO = [PSCustomObject]@{
            "title" = ${Title}
            "description" = ${Description}
            "alertId" = ${AlertId}
            "priority" = ${Priority}
            "status" = ${Status}
            "dueDateTime" = ${DueDateTime}
            "serviceId" = ${ServiceId}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to CreateAlertingDto<PSCustomObject>

.DESCRIPTION

Convert from JSON to CreateAlertingDto<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

CreateAlertingDto<PSCustomObject>
#>
function ConvertFrom-PSJsonToCreateAlertingDto {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: PSGradient => PSCreateAlertingDto' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in PSCreateAlertingDto
        $AllProperties = ("title", "description", "alertId", "priority", "status", "dueDateTime", "serviceId")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        If ([string]::IsNullOrEmpty($Json) -or $Json -eq "{}") { # empty json
            throw "Error! Empty JSON cannot be serialized due to the required property 'title' missing."
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "title"))) {
            throw "Error! JSON cannot be serialized due to the required property 'title' missing."
        } else {
            $Title = $JsonParameters.PSobject.Properties["title"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "description"))) {
            throw "Error! JSON cannot be serialized due to the required property 'description' missing."
        } else {
            $Description = $JsonParameters.PSobject.Properties["description"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "alertId"))) {
            throw "Error! JSON cannot be serialized due to the required property 'alertId' missing."
        } else {
            $AlertId = $JsonParameters.PSobject.Properties["alertId"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "priority"))) {
            throw "Error! JSON cannot be serialized due to the required property 'priority' missing."
        } else {
            $Priority = $JsonParameters.PSobject.Properties["priority"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "status"))) {
            throw "Error! JSON cannot be serialized due to the required property 'status' missing."
        } else {
            $Status = $JsonParameters.PSobject.Properties["status"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "dueDateTime"))) { #optional property not found
            $DueDateTime = $null
        } else {
            $DueDateTime = $JsonParameters.PSobject.Properties["dueDateTime"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "serviceId"))) { #optional property not found
            $ServiceId = $null
        } else {
            $ServiceId = $JsonParameters.PSobject.Properties["serviceId"].value
        }

        $PSO = [PSCustomObject]@{
            "title" = ${Title}
            "description" = ${Description}
            "alertId" = ${AlertId}
            "priority" = ${Priority}
            "status" = ${Status}
            "dueDateTime" = ${DueDateTime}
            "serviceId" = ${ServiceId}
        }

        return $PSO
    }

}

