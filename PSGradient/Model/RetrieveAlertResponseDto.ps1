#
# API Documentation
# Howdy! Looks like you've found our open API documentation! Take a gander, and while you're at it feel free to take some endpoints for a spin.
# Version: 1.0
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER TicketId
Ticket id from the PSA the ticket was written to
.PARAMETER CreatedAt
Date the ticket was created in the PSA
.PARAMETER Message
A descriptive message that will tell you the status of the Alert
.PARAMETER MessageId
The Id of the message that is inflight or has been processed
.PARAMETER Status
The status of the ticket, and can be values: failed, pending, success
.PARAMETER StatusCode
If there was an error processing the Alert into a Ticket, this is the HttpStatus Code
.PARAMETER Errors
On failure, this is an array of errors we encountered when trying to create a ticket from an Alert
.OUTPUTS

RetrieveAlertResponseDto<PSCustomObject>
#>

function Initialize-PSRetrieveAlertResponseDto {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${TicketId},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${CreatedAt},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Message},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${MessageId},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Status},
        [Parameter(Position = 5, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Decimal]]
        ${StatusCode},
        [Parameter(Position = 6, ValueFromPipelineByPropertyName = $true)]
        [String[]]
        ${Errors}
    )

    Process {
        'Creating PSCustomObject: PSGradient => PSRetrieveAlertResponseDto' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug


        $PSO = [PSCustomObject]@{
            "ticketId" = ${TicketId}
            "createdAt" = ${CreatedAt}
            "message" = ${Message}
            "messageId" = ${MessageId}
            "status" = ${Status}
            "statusCode" = ${StatusCode}
            "errors" = ${Errors}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to RetrieveAlertResponseDto<PSCustomObject>

.DESCRIPTION

Convert from JSON to RetrieveAlertResponseDto<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

RetrieveAlertResponseDto<PSCustomObject>
#>
function ConvertFrom-PSJsonToRetrieveAlertResponseDto {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: PSGradient => PSRetrieveAlertResponseDto' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in PSRetrieveAlertResponseDto
        $AllProperties = ("ticketId", "createdAt", "message", "messageId", "status", "statusCode", "errors")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "ticketId"))) { #optional property not found
            $TicketId = $null
        } else {
            $TicketId = $JsonParameters.PSobject.Properties["ticketId"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "createdAt"))) { #optional property not found
            $CreatedAt = $null
        } else {
            $CreatedAt = $JsonParameters.PSobject.Properties["createdAt"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "message"))) { #optional property not found
            $Message = $null
        } else {
            $Message = $JsonParameters.PSobject.Properties["message"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "messageId"))) { #optional property not found
            $MessageId = $null
        } else {
            $MessageId = $JsonParameters.PSobject.Properties["messageId"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "status"))) { #optional property not found
            $Status = $null
        } else {
            $Status = $JsonParameters.PSobject.Properties["status"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "statusCode"))) { #optional property not found
            $StatusCode = $null
        } else {
            $StatusCode = $JsonParameters.PSobject.Properties["statusCode"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "errors"))) { #optional property not found
            $Errors = $null
        } else {
            $Errors = $JsonParameters.PSobject.Properties["errors"].value
        }

        $PSO = [PSCustomObject]@{
            "ticketId" = ${TicketId}
            "createdAt" = ${CreatedAt}
            "message" = ${Message}
            "messageId" = ${MessageId}
            "status" = ${Status}
            "statusCode" = ${StatusCode}
            "errors" = ${Errors}
        }

        return $PSO
    }

}

