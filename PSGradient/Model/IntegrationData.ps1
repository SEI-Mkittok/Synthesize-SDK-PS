#
# API Documentation
# Howdy! Looks like you've found our open API documentation! Take a gander, and while you're at it feel free to take some endpoints for a spin.
# Version: 1.0
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER OrganizationId
No description available.
.PARAMETER Name
No description available.
.PARAMETER VendorId
No description available.
.PARAMETER VendorName
No description available.
.PARAMETER IntegrationId
No description available.
.PARAMETER Status
No description available.
.PARAMETER LastSyncedAt
No description available.
.OUTPUTS

IntegrationData<PSCustomObject>
#>

function Initialize-PSIntegrationData {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${OrganizationId},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Name},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${VendorId},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${VendorName},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${IntegrationId},
        [Parameter(Position = 5, ValueFromPipelineByPropertyName = $true)]
        [ValidateSet("#/components/schemas/#/components/schemas/VendorIntegrationStatusEnum")]
        [String]
        ${Status},
        [Parameter(Position = 6, ValueFromPipelineByPropertyName = $true)]
        [System.DateTime]
        ${LastSyncedAt}
    )

    Process {
        'Creating PSCustomObject: PSGradient => PSIntegrationData' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        if ($null -eq $OrganizationId) {
            throw "invalid value for 'OrganizationId', 'OrganizationId' cannot be null."
        }

        if ($null -eq $Name) {
            throw "invalid value for 'Name', 'Name' cannot be null."
        }

        if ($null -eq $VendorId) {
            throw "invalid value for 'VendorId', 'VendorId' cannot be null."
        }

        if ($null -eq $VendorName) {
            throw "invalid value for 'VendorName', 'VendorName' cannot be null."
        }

        if ($null -eq $IntegrationId) {
            throw "invalid value for 'IntegrationId', 'IntegrationId' cannot be null."
        }

        if ($null -eq $Status) {
            throw "invalid value for 'Status', 'Status' cannot be null."
        }

        if ($null -eq $LastSyncedAt) {
            throw "invalid value for 'LastSyncedAt', 'LastSyncedAt' cannot be null."
        }


        $PSO = [PSCustomObject]@{
            "organizationId" = ${OrganizationId}
            "name" = ${Name}
            "vendorId" = ${VendorId}
            "vendorName" = ${VendorName}
            "integrationId" = ${IntegrationId}
            "status" = ${Status}
            "lastSyncedAt" = ${LastSyncedAt}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to IntegrationData<PSCustomObject>

.DESCRIPTION

Convert from JSON to IntegrationData<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

IntegrationData<PSCustomObject>
#>
function ConvertFrom-PSJsonToIntegrationData {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: PSGradient => PSIntegrationData' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in PSIntegrationData
        $AllProperties = ("organizationId", "name", "vendorId", "vendorName", "integrationId", "status", "lastSyncedAt")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        If ([string]::IsNullOrEmpty($Json) -or $Json -eq "{}") { # empty json
            throw "Error! Empty JSON cannot be serialized due to the required property 'organizationId' missing."
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "organizationId"))) {
            throw "Error! JSON cannot be serialized due to the required property 'organizationId' missing."
        } else {
            $OrganizationId = $JsonParameters.PSobject.Properties["organizationId"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "name"))) {
            throw "Error! JSON cannot be serialized due to the required property 'name' missing."
        } else {
            $Name = $JsonParameters.PSobject.Properties["name"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "vendorId"))) {
            throw "Error! JSON cannot be serialized due to the required property 'vendorId' missing."
        } else {
            $VendorId = $JsonParameters.PSobject.Properties["vendorId"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "vendorName"))) {
            throw "Error! JSON cannot be serialized due to the required property 'vendorName' missing."
        } else {
            $VendorName = $JsonParameters.PSobject.Properties["vendorName"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "integrationId"))) {
            throw "Error! JSON cannot be serialized due to the required property 'integrationId' missing."
        } else {
            $IntegrationId = $JsonParameters.PSobject.Properties["integrationId"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "status"))) {
            throw "Error! JSON cannot be serialized due to the required property 'status' missing."
        } else {
            $Status = $JsonParameters.PSobject.Properties["status"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "lastSyncedAt"))) {
            throw "Error! JSON cannot be serialized due to the required property 'lastSyncedAt' missing."
        } else {
            $LastSyncedAt = $JsonParameters.PSobject.Properties["lastSyncedAt"].value
        }

        $PSO = [PSCustomObject]@{
            "organizationId" = ${OrganizationId}
            "name" = ${Name}
            "vendorId" = ${VendorId}
            "vendorName" = ${VendorName}
            "integrationId" = ${IntegrationId}
            "status" = ${Status}
            "lastSyncedAt" = ${LastSyncedAt}
        }

        return $PSO
    }

}

